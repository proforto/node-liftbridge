// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.Ack', null, global);
goog.exportSymbol('proto.proto.Ack.Error', null, global);
goog.exportSymbol('proto.proto.AckPolicy', null, global);
goog.exportSymbol('proto.proto.ActivityStreamEvent', null, global);
goog.exportSymbol('proto.proto.ActivityStreamOp', null, global);
goog.exportSymbol('proto.proto.Broker', null, global);
goog.exportSymbol('proto.proto.CreateStreamOp', null, global);
goog.exportSymbol('proto.proto.CreateStreamRequest', null, global);
goog.exportSymbol('proto.proto.CreateStreamResponse', null, global);
goog.exportSymbol('proto.proto.DeleteStreamOp', null, global);
goog.exportSymbol('proto.proto.DeleteStreamRequest', null, global);
goog.exportSymbol('proto.proto.DeleteStreamResponse', null, global);
goog.exportSymbol('proto.proto.FetchCursorRequest', null, global);
goog.exportSymbol('proto.proto.FetchCursorResponse', null, global);
goog.exportSymbol('proto.proto.FetchMetadataRequest', null, global);
goog.exportSymbol('proto.proto.FetchMetadataResponse', null, global);
goog.exportSymbol('proto.proto.FetchPartitionMetadataRequest', null, global);
goog.exportSymbol('proto.proto.FetchPartitionMetadataResponse', null, global);
goog.exportSymbol('proto.proto.Message', null, global);
goog.exportSymbol('proto.proto.NullableBool', null, global);
goog.exportSymbol('proto.proto.NullableInt32', null, global);
goog.exportSymbol('proto.proto.NullableInt64', null, global);
goog.exportSymbol('proto.proto.PartitionEventTimestamps', null, global);
goog.exportSymbol('proto.proto.PartitionMetadata', null, global);
goog.exportSymbol('proto.proto.PauseStreamOp', null, global);
goog.exportSymbol('proto.proto.PauseStreamRequest', null, global);
goog.exportSymbol('proto.proto.PauseStreamResponse', null, global);
goog.exportSymbol('proto.proto.PublishAsyncError', null, global);
goog.exportSymbol('proto.proto.PublishAsyncError.Code', null, global);
goog.exportSymbol('proto.proto.PublishRequest', null, global);
goog.exportSymbol('proto.proto.PublishResponse', null, global);
goog.exportSymbol('proto.proto.PublishToSubjectRequest', null, global);
goog.exportSymbol('proto.proto.PublishToSubjectResponse', null, global);
goog.exportSymbol('proto.proto.ResumeStreamOp', null, global);
goog.exportSymbol('proto.proto.SetCursorRequest', null, global);
goog.exportSymbol('proto.proto.SetCursorResponse', null, global);
goog.exportSymbol('proto.proto.SetStreamReadonlyOp', null, global);
goog.exportSymbol('proto.proto.SetStreamReadonlyRequest', null, global);
goog.exportSymbol('proto.proto.SetStreamReadonlyResponse', null, global);
goog.exportSymbol('proto.proto.StartPosition', null, global);
goog.exportSymbol('proto.proto.StopPosition', null, global);
goog.exportSymbol('proto.proto.StreamMetadata', null, global);
goog.exportSymbol('proto.proto.StreamMetadata.Error', null, global);
goog.exportSymbol('proto.proto.SubscribeRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NullableInt64 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NullableInt64, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NullableInt64.displayName = 'proto.proto.NullableInt64';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NullableInt32 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NullableInt32, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NullableInt32.displayName = 'proto.proto.NullableInt32';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NullableBool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.NullableBool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NullableBool.displayName = 'proto.proto.NullableBool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CreateStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CreateStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CreateStreamRequest.displayName = 'proto.proto.CreateStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CreateStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CreateStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CreateStreamResponse.displayName = 'proto.proto.CreateStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DeleteStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DeleteStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DeleteStreamRequest.displayName = 'proto.proto.DeleteStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DeleteStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DeleteStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DeleteStreamResponse.displayName = 'proto.proto.DeleteStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PauseStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PauseStreamRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.PauseStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PauseStreamRequest.displayName = 'proto.proto.PauseStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PauseStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PauseStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PauseStreamResponse.displayName = 'proto.proto.PauseStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetStreamReadonlyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SetStreamReadonlyRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.SetStreamReadonlyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetStreamReadonlyRequest.displayName = 'proto.proto.SetStreamReadonlyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetStreamReadonlyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetStreamReadonlyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetStreamReadonlyResponse.displayName = 'proto.proto.SetStreamReadonlyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SubscribeRequest.displayName = 'proto.proto.SubscribeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FetchMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.FetchMetadataRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.FetchMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FetchMetadataRequest.displayName = 'proto.proto.FetchMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FetchMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.FetchMetadataResponse.repeatedFields_, null);
};
goog.inherits(proto.proto.FetchMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FetchMetadataResponse.displayName = 'proto.proto.FetchMetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FetchPartitionMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FetchPartitionMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FetchPartitionMetadataRequest.displayName = 'proto.proto.FetchPartitionMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FetchPartitionMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FetchPartitionMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FetchPartitionMetadataResponse.displayName = 'proto.proto.FetchPartitionMetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PublishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PublishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PublishRequest.displayName = 'proto.proto.PublishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PublishAsyncError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PublishAsyncError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PublishAsyncError.displayName = 'proto.proto.PublishAsyncError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PublishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PublishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PublishResponse.displayName = 'proto.proto.PublishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PublishToSubjectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PublishToSubjectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PublishToSubjectRequest.displayName = 'proto.proto.PublishToSubjectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PublishToSubjectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PublishToSubjectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PublishToSubjectResponse.displayName = 'proto.proto.PublishToSubjectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetCursorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetCursorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetCursorRequest.displayName = 'proto.proto.SetCursorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetCursorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetCursorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetCursorResponse.displayName = 'proto.proto.SetCursorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FetchCursorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FetchCursorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FetchCursorRequest.displayName = 'proto.proto.FetchCursorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FetchCursorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FetchCursorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FetchCursorResponse.displayName = 'proto.proto.FetchCursorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Broker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Broker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Broker.displayName = 'proto.proto.Broker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StreamMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StreamMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StreamMetadata.displayName = 'proto.proto.StreamMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PartitionEventTimestamps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PartitionEventTimestamps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PartitionEventTimestamps.displayName = 'proto.proto.PartitionEventTimestamps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PartitionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PartitionMetadata.repeatedFields_, null);
};
goog.inherits(proto.proto.PartitionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PartitionMetadata.displayName = 'proto.proto.PartitionMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Message.displayName = 'proto.proto.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Ack.displayName = 'proto.proto.Ack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CreateStreamOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.CreateStreamOp.repeatedFields_, null);
};
goog.inherits(proto.proto.CreateStreamOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CreateStreamOp.displayName = 'proto.proto.CreateStreamOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DeleteStreamOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DeleteStreamOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DeleteStreamOp.displayName = 'proto.proto.DeleteStreamOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PauseStreamOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PauseStreamOp.repeatedFields_, null);
};
goog.inherits(proto.proto.PauseStreamOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PauseStreamOp.displayName = 'proto.proto.PauseStreamOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ResumeStreamOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ResumeStreamOp.repeatedFields_, null);
};
goog.inherits(proto.proto.ResumeStreamOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ResumeStreamOp.displayName = 'proto.proto.ResumeStreamOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetStreamReadonlyOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SetStreamReadonlyOp.repeatedFields_, null);
};
goog.inherits(proto.proto.SetStreamReadonlyOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetStreamReadonlyOp.displayName = 'proto.proto.SetStreamReadonlyOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ActivityStreamEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ActivityStreamEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ActivityStreamEvent.displayName = 'proto.proto.ActivityStreamEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NullableInt64.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NullableInt64.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NullableInt64} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NullableInt64.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NullableInt64}
 */
proto.proto.NullableInt64.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NullableInt64;
  return proto.proto.NullableInt64.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NullableInt64} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NullableInt64}
 */
proto.proto.NullableInt64.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NullableInt64.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NullableInt64.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NullableInt64} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NullableInt64.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.proto.NullableInt64.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.NullableInt64.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NullableInt32.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NullableInt32.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NullableInt32} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NullableInt32.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NullableInt32}
 */
proto.proto.NullableInt32.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NullableInt32;
  return proto.proto.NullableInt32.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NullableInt32} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NullableInt32}
 */
proto.proto.NullableInt32.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NullableInt32.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NullableInt32.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NullableInt32} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NullableInt32.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.proto.NullableInt32.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.NullableInt32.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NullableBool.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NullableBool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NullableBool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NullableBool.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NullableBool}
 */
proto.proto.NullableBool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NullableBool;
  return proto.proto.NullableBool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NullableBool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NullableBool}
 */
proto.proto.NullableBool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NullableBool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NullableBool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NullableBool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NullableBool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool value = 1;
 * @return {boolean}
 */
proto.proto.NullableBool.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.proto.NullableBool.prototype.setValue = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CreateStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CreateStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CreateStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    group: jspb.Message.getFieldWithDefault(msg, 3, ""),
    replicationfactor: jspb.Message.getFieldWithDefault(msg, 4, 0),
    partitions: jspb.Message.getFieldWithDefault(msg, 5, 0),
    retentionmaxbytes: (f = msg.getRetentionmaxbytes()) && proto.proto.NullableInt64.toObject(includeInstance, f),
    retentionmaxmessages: (f = msg.getRetentionmaxmessages()) && proto.proto.NullableInt64.toObject(includeInstance, f),
    retentionmaxage: (f = msg.getRetentionmaxage()) && proto.proto.NullableInt64.toObject(includeInstance, f),
    cleanerinterval: (f = msg.getCleanerinterval()) && proto.proto.NullableInt64.toObject(includeInstance, f),
    segmentmaxbytes: (f = msg.getSegmentmaxbytes()) && proto.proto.NullableInt64.toObject(includeInstance, f),
    segmentmaxage: (f = msg.getSegmentmaxage()) && proto.proto.NullableInt64.toObject(includeInstance, f),
    compactmaxgoroutines: (f = msg.getCompactmaxgoroutines()) && proto.proto.NullableInt32.toObject(includeInstance, f),
    compactenabled: (f = msg.getCompactenabled()) && proto.proto.NullableBool.toObject(includeInstance, f),
    autopausetime: (f = msg.getAutopausetime()) && proto.proto.NullableInt64.toObject(includeInstance, f),
    autopausedisableifsubscribers: (f = msg.getAutopausedisableifsubscribers()) && proto.proto.NullableBool.toObject(includeInstance, f),
    minisr: (f = msg.getMinisr()) && proto.proto.NullableInt32.toObject(includeInstance, f),
    optimisticconcurrencycontrol: (f = msg.getOptimisticconcurrencycontrol()) && proto.proto.NullableBool.toObject(includeInstance, f),
    encryption: (f = msg.getEncryption()) && proto.proto.NullableBool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CreateStreamRequest}
 */
proto.proto.CreateStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CreateStreamRequest;
  return proto.proto.CreateStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CreateStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CreateStreamRequest}
 */
proto.proto.CreateStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReplicationfactor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartitions(value);
      break;
    case 6:
      var value = new proto.proto.NullableInt64;
      reader.readMessage(value,proto.proto.NullableInt64.deserializeBinaryFromReader);
      msg.setRetentionmaxbytes(value);
      break;
    case 7:
      var value = new proto.proto.NullableInt64;
      reader.readMessage(value,proto.proto.NullableInt64.deserializeBinaryFromReader);
      msg.setRetentionmaxmessages(value);
      break;
    case 8:
      var value = new proto.proto.NullableInt64;
      reader.readMessage(value,proto.proto.NullableInt64.deserializeBinaryFromReader);
      msg.setRetentionmaxage(value);
      break;
    case 9:
      var value = new proto.proto.NullableInt64;
      reader.readMessage(value,proto.proto.NullableInt64.deserializeBinaryFromReader);
      msg.setCleanerinterval(value);
      break;
    case 10:
      var value = new proto.proto.NullableInt64;
      reader.readMessage(value,proto.proto.NullableInt64.deserializeBinaryFromReader);
      msg.setSegmentmaxbytes(value);
      break;
    case 11:
      var value = new proto.proto.NullableInt64;
      reader.readMessage(value,proto.proto.NullableInt64.deserializeBinaryFromReader);
      msg.setSegmentmaxage(value);
      break;
    case 12:
      var value = new proto.proto.NullableInt32;
      reader.readMessage(value,proto.proto.NullableInt32.deserializeBinaryFromReader);
      msg.setCompactmaxgoroutines(value);
      break;
    case 13:
      var value = new proto.proto.NullableBool;
      reader.readMessage(value,proto.proto.NullableBool.deserializeBinaryFromReader);
      msg.setCompactenabled(value);
      break;
    case 14:
      var value = new proto.proto.NullableInt64;
      reader.readMessage(value,proto.proto.NullableInt64.deserializeBinaryFromReader);
      msg.setAutopausetime(value);
      break;
    case 15:
      var value = new proto.proto.NullableBool;
      reader.readMessage(value,proto.proto.NullableBool.deserializeBinaryFromReader);
      msg.setAutopausedisableifsubscribers(value);
      break;
    case 16:
      var value = new proto.proto.NullableInt32;
      reader.readMessage(value,proto.proto.NullableInt32.deserializeBinaryFromReader);
      msg.setMinisr(value);
      break;
    case 17:
      var value = new proto.proto.NullableBool;
      reader.readMessage(value,proto.proto.NullableBool.deserializeBinaryFromReader);
      msg.setOptimisticconcurrencycontrol(value);
      break;
    case 18:
      var value = new proto.proto.NullableBool;
      reader.readMessage(value,proto.proto.NullableBool.deserializeBinaryFromReader);
      msg.setEncryption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CreateStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CreateStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CreateStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReplicationfactor();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPartitions();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRetentionmaxbytes();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.NullableInt64.serializeBinaryToWriter
    );
  }
  f = message.getRetentionmaxmessages();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.NullableInt64.serializeBinaryToWriter
    );
  }
  f = message.getRetentionmaxage();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.NullableInt64.serializeBinaryToWriter
    );
  }
  f = message.getCleanerinterval();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.NullableInt64.serializeBinaryToWriter
    );
  }
  f = message.getSegmentmaxbytes();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.NullableInt64.serializeBinaryToWriter
    );
  }
  f = message.getSegmentmaxage();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.NullableInt64.serializeBinaryToWriter
    );
  }
  f = message.getCompactmaxgoroutines();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.NullableInt32.serializeBinaryToWriter
    );
  }
  f = message.getCompactenabled();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getAutopausetime();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.NullableInt64.serializeBinaryToWriter
    );
  }
  f = message.getAutopausedisableifsubscribers();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.proto.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getMinisr();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.proto.NullableInt32.serializeBinaryToWriter
    );
  }
  f = message.getOptimisticconcurrencycontrol();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.proto.NullableBool.serializeBinaryToWriter
    );
  }
  f = message.getEncryption();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.proto.NullableBool.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.proto.CreateStreamRequest.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CreateStreamRequest.prototype.setSubject = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.CreateStreamRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.CreateStreamRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string group = 3;
 * @return {string}
 */
proto.proto.CreateStreamRequest.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.CreateStreamRequest.prototype.setGroup = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 replicationFactor = 4;
 * @return {number}
 */
proto.proto.CreateStreamRequest.prototype.getReplicationfactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.CreateStreamRequest.prototype.setReplicationfactor = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 partitions = 5;
 * @return {number}
 */
proto.proto.CreateStreamRequest.prototype.getPartitions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.CreateStreamRequest.prototype.setPartitions = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional NullableInt64 retentionMaxBytes = 6;
 * @return {?proto.proto.NullableInt64}
 */
proto.proto.CreateStreamRequest.prototype.getRetentionmaxbytes = function() {
  return /** @type{?proto.proto.NullableInt64} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt64, 6));
};


/** @param {?proto.proto.NullableInt64|undefined} value */
proto.proto.CreateStreamRequest.prototype.setRetentionmaxbytes = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearRetentionmaxbytes = function() {
  this.setRetentionmaxbytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasRetentionmaxbytes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional NullableInt64 retentionMaxMessages = 7;
 * @return {?proto.proto.NullableInt64}
 */
proto.proto.CreateStreamRequest.prototype.getRetentionmaxmessages = function() {
  return /** @type{?proto.proto.NullableInt64} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt64, 7));
};


/** @param {?proto.proto.NullableInt64|undefined} value */
proto.proto.CreateStreamRequest.prototype.setRetentionmaxmessages = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearRetentionmaxmessages = function() {
  this.setRetentionmaxmessages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasRetentionmaxmessages = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NullableInt64 retentionMaxAge = 8;
 * @return {?proto.proto.NullableInt64}
 */
proto.proto.CreateStreamRequest.prototype.getRetentionmaxage = function() {
  return /** @type{?proto.proto.NullableInt64} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt64, 8));
};


/** @param {?proto.proto.NullableInt64|undefined} value */
proto.proto.CreateStreamRequest.prototype.setRetentionmaxage = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearRetentionmaxage = function() {
  this.setRetentionmaxage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasRetentionmaxage = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NullableInt64 cleanerInterval = 9;
 * @return {?proto.proto.NullableInt64}
 */
proto.proto.CreateStreamRequest.prototype.getCleanerinterval = function() {
  return /** @type{?proto.proto.NullableInt64} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt64, 9));
};


/** @param {?proto.proto.NullableInt64|undefined} value */
proto.proto.CreateStreamRequest.prototype.setCleanerinterval = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearCleanerinterval = function() {
  this.setCleanerinterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasCleanerinterval = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional NullableInt64 segmentMaxBytes = 10;
 * @return {?proto.proto.NullableInt64}
 */
proto.proto.CreateStreamRequest.prototype.getSegmentmaxbytes = function() {
  return /** @type{?proto.proto.NullableInt64} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt64, 10));
};


/** @param {?proto.proto.NullableInt64|undefined} value */
proto.proto.CreateStreamRequest.prototype.setSegmentmaxbytes = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearSegmentmaxbytes = function() {
  this.setSegmentmaxbytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasSegmentmaxbytes = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional NullableInt64 segmentMaxAge = 11;
 * @return {?proto.proto.NullableInt64}
 */
proto.proto.CreateStreamRequest.prototype.getSegmentmaxage = function() {
  return /** @type{?proto.proto.NullableInt64} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt64, 11));
};


/** @param {?proto.proto.NullableInt64|undefined} value */
proto.proto.CreateStreamRequest.prototype.setSegmentmaxage = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearSegmentmaxage = function() {
  this.setSegmentmaxage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasSegmentmaxage = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional NullableInt32 compactMaxGoroutines = 12;
 * @return {?proto.proto.NullableInt32}
 */
proto.proto.CreateStreamRequest.prototype.getCompactmaxgoroutines = function() {
  return /** @type{?proto.proto.NullableInt32} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt32, 12));
};


/** @param {?proto.proto.NullableInt32|undefined} value */
proto.proto.CreateStreamRequest.prototype.setCompactmaxgoroutines = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearCompactmaxgoroutines = function() {
  this.setCompactmaxgoroutines(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasCompactmaxgoroutines = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional NullableBool compactEnabled = 13;
 * @return {?proto.proto.NullableBool}
 */
proto.proto.CreateStreamRequest.prototype.getCompactenabled = function() {
  return /** @type{?proto.proto.NullableBool} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableBool, 13));
};


/** @param {?proto.proto.NullableBool|undefined} value */
proto.proto.CreateStreamRequest.prototype.setCompactenabled = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearCompactenabled = function() {
  this.setCompactenabled(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasCompactenabled = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional NullableInt64 autoPauseTime = 14;
 * @return {?proto.proto.NullableInt64}
 */
proto.proto.CreateStreamRequest.prototype.getAutopausetime = function() {
  return /** @type{?proto.proto.NullableInt64} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt64, 14));
};


/** @param {?proto.proto.NullableInt64|undefined} value */
proto.proto.CreateStreamRequest.prototype.setAutopausetime = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearAutopausetime = function() {
  this.setAutopausetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasAutopausetime = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional NullableBool autoPauseDisableIfSubscribers = 15;
 * @return {?proto.proto.NullableBool}
 */
proto.proto.CreateStreamRequest.prototype.getAutopausedisableifsubscribers = function() {
  return /** @type{?proto.proto.NullableBool} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableBool, 15));
};


/** @param {?proto.proto.NullableBool|undefined} value */
proto.proto.CreateStreamRequest.prototype.setAutopausedisableifsubscribers = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearAutopausedisableifsubscribers = function() {
  this.setAutopausedisableifsubscribers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasAutopausedisableifsubscribers = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional NullableInt32 minIsr = 16;
 * @return {?proto.proto.NullableInt32}
 */
proto.proto.CreateStreamRequest.prototype.getMinisr = function() {
  return /** @type{?proto.proto.NullableInt32} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableInt32, 16));
};


/** @param {?proto.proto.NullableInt32|undefined} value */
proto.proto.CreateStreamRequest.prototype.setMinisr = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearMinisr = function() {
  this.setMinisr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasMinisr = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional NullableBool optimisticConcurrencyControl = 17;
 * @return {?proto.proto.NullableBool}
 */
proto.proto.CreateStreamRequest.prototype.getOptimisticconcurrencycontrol = function() {
  return /** @type{?proto.proto.NullableBool} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableBool, 17));
};


/** @param {?proto.proto.NullableBool|undefined} value */
proto.proto.CreateStreamRequest.prototype.setOptimisticconcurrencycontrol = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearOptimisticconcurrencycontrol = function() {
  this.setOptimisticconcurrencycontrol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasOptimisticconcurrencycontrol = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional NullableBool encryption = 18;
 * @return {?proto.proto.NullableBool}
 */
proto.proto.CreateStreamRequest.prototype.getEncryption = function() {
  return /** @type{?proto.proto.NullableBool} */ (
    jspb.Message.getWrapperField(this, proto.proto.NullableBool, 18));
};


/** @param {?proto.proto.NullableBool|undefined} value */
proto.proto.CreateStreamRequest.prototype.setEncryption = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.CreateStreamRequest.prototype.clearEncryption = function() {
  this.setEncryption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CreateStreamRequest.prototype.hasEncryption = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CreateStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CreateStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CreateStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CreateStreamResponse}
 */
proto.proto.CreateStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CreateStreamResponse;
  return proto.proto.CreateStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CreateStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CreateStreamResponse}
 */
proto.proto.CreateStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CreateStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CreateStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CreateStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DeleteStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DeleteStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DeleteStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DeleteStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DeleteStreamRequest}
 */
proto.proto.DeleteStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DeleteStreamRequest;
  return proto.proto.DeleteStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DeleteStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DeleteStreamRequest}
 */
proto.proto.DeleteStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DeleteStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DeleteStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DeleteStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DeleteStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.DeleteStreamRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.DeleteStreamRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DeleteStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DeleteStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DeleteStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DeleteStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DeleteStreamResponse}
 */
proto.proto.DeleteStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DeleteStreamResponse;
  return proto.proto.DeleteStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DeleteStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DeleteStreamResponse}
 */
proto.proto.DeleteStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DeleteStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DeleteStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DeleteStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DeleteStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PauseStreamRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PauseStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PauseStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PauseStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PauseStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partitionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    resumeall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PauseStreamRequest}
 */
proto.proto.PauseStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PauseStreamRequest;
  return proto.proto.PauseStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PauseStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PauseStreamRequest}
 */
proto.proto.PauseStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPartitionsList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResumeall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PauseStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PauseStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PauseStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PauseStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartitionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getResumeall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.PauseStreamRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.PauseStreamRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 partitions = 2;
 * @return {!Array<number>}
 */
proto.proto.PauseStreamRequest.prototype.getPartitionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.proto.PauseStreamRequest.prototype.setPartitionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.proto.PauseStreamRequest.prototype.addPartitions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.PauseStreamRequest.prototype.clearPartitionsList = function() {
  this.setPartitionsList([]);
};


/**
 * optional bool resumeAll = 3;
 * @return {boolean}
 */
proto.proto.PauseStreamRequest.prototype.getResumeall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.PauseStreamRequest.prototype.setResumeall = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PauseStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PauseStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PauseStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PauseStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PauseStreamResponse}
 */
proto.proto.PauseStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PauseStreamResponse;
  return proto.proto.PauseStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PauseStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PauseStreamResponse}
 */
proto.proto.PauseStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PauseStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PauseStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PauseStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PauseStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SetStreamReadonlyRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetStreamReadonlyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetStreamReadonlyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetStreamReadonlyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetStreamReadonlyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partitionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    readonly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetStreamReadonlyRequest}
 */
proto.proto.SetStreamReadonlyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetStreamReadonlyRequest;
  return proto.proto.SetStreamReadonlyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetStreamReadonlyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetStreamReadonlyRequest}
 */
proto.proto.SetStreamReadonlyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPartitionsList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetStreamReadonlyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetStreamReadonlyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetStreamReadonlyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetStreamReadonlyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartitionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getReadonly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.SetStreamReadonlyRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.SetStreamReadonlyRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 partitions = 2;
 * @return {!Array<number>}
 */
proto.proto.SetStreamReadonlyRequest.prototype.getPartitionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.proto.SetStreamReadonlyRequest.prototype.setPartitionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.proto.SetStreamReadonlyRequest.prototype.addPartitions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.SetStreamReadonlyRequest.prototype.clearPartitionsList = function() {
  this.setPartitionsList([]);
};


/**
 * optional bool readonly = 3;
 * @return {boolean}
 */
proto.proto.SetStreamReadonlyRequest.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.SetStreamReadonlyRequest.prototype.setReadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetStreamReadonlyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetStreamReadonlyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetStreamReadonlyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetStreamReadonlyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetStreamReadonlyResponse}
 */
proto.proto.SetStreamReadonlyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetStreamReadonlyResponse;
  return proto.proto.SetStreamReadonlyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetStreamReadonlyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetStreamReadonlyResponse}
 */
proto.proto.SetStreamReadonlyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetStreamReadonlyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetStreamReadonlyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetStreamReadonlyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetStreamReadonlyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startposition: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startoffset: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    starttimestamp: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    readisrreplica: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    resume: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    stopposition: jspb.Message.getFieldWithDefault(msg, 8, 0),
    stopoffset: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    stoptimestamp: jspb.Message.getFieldWithDefault(msg, 10, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SubscribeRequest}
 */
proto.proto.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SubscribeRequest;
  return proto.proto.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SubscribeRequest}
 */
proto.proto.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.StartPosition} */ (reader.readEnum());
      msg.setStartposition(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStartoffset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStarttimestamp(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadisrreplica(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResume(value);
      break;
    case 8:
      var value = /** @type {!proto.proto.StopPosition} */ (reader.readEnum());
      msg.setStopposition(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStopoffset(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setStoptimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStartposition();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStartoffset();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getStarttimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getReadisrreplica();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getResume();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getStopposition();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getStopoffset();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      9,
      f
    );
  }
  f = message.getStoptimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      10,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.SubscribeRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.SubscribeRequest.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partition = 2;
 * @return {number}
 */
proto.proto.SubscribeRequest.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.SubscribeRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional StartPosition startPosition = 3;
 * @return {!proto.proto.StartPosition}
 */
proto.proto.SubscribeRequest.prototype.getStartposition = function() {
  return /** @type {!proto.proto.StartPosition} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.proto.StartPosition} value */
proto.proto.SubscribeRequest.prototype.setStartposition = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 startOffset = 4;
 * @return {string}
 */
proto.proto.SubscribeRequest.prototype.getStartoffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.proto.SubscribeRequest.prototype.setStartoffset = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional int64 startTimestamp = 5;
 * @return {string}
 */
proto.proto.SubscribeRequest.prototype.getStarttimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.proto.SubscribeRequest.prototype.setStarttimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional bool readISRReplica = 6;
 * @return {boolean}
 */
proto.proto.SubscribeRequest.prototype.getReadisrreplica = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.proto.SubscribeRequest.prototype.setReadisrreplica = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool resume = 7;
 * @return {boolean}
 */
proto.proto.SubscribeRequest.prototype.getResume = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.proto.SubscribeRequest.prototype.setResume = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional StopPosition stopPosition = 8;
 * @return {!proto.proto.StopPosition}
 */
proto.proto.SubscribeRequest.prototype.getStopposition = function() {
  return /** @type {!proto.proto.StopPosition} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.proto.StopPosition} value */
proto.proto.SubscribeRequest.prototype.setStopposition = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int64 stopOffset = 9;
 * @return {string}
 */
proto.proto.SubscribeRequest.prototype.getStopoffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/** @param {string} value */
proto.proto.SubscribeRequest.prototype.setStopoffset = function(value) {
  jspb.Message.setProto3StringIntField(this, 9, value);
};


/**
 * optional int64 stopTimestamp = 10;
 * @return {string}
 */
proto.proto.SubscribeRequest.prototype.getStoptimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/** @param {string} value */
proto.proto.SubscribeRequest.prototype.setStoptimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.FetchMetadataRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FetchMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FetchMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FetchMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FetchMetadataRequest}
 */
proto.proto.FetchMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FetchMetadataRequest;
  return proto.proto.FetchMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FetchMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FetchMetadataRequest}
 */
proto.proto.FetchMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addStreams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FetchMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FetchMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FetchMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string streams = 1;
 * @return {!Array<string>}
 */
proto.proto.FetchMetadataRequest.prototype.getStreamsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.proto.FetchMetadataRequest.prototype.setStreamsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.proto.FetchMetadataRequest.prototype.addStreams = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.FetchMetadataRequest.prototype.clearStreamsList = function() {
  this.setStreamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.FetchMetadataResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FetchMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FetchMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FetchMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    brokersList: jspb.Message.toObjectList(msg.getBrokersList(),
    proto.proto.Broker.toObject, includeInstance),
    metadataList: jspb.Message.toObjectList(msg.getMetadataList(),
    proto.proto.StreamMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FetchMetadataResponse}
 */
proto.proto.FetchMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FetchMetadataResponse;
  return proto.proto.FetchMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FetchMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FetchMetadataResponse}
 */
proto.proto.FetchMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Broker;
      reader.readMessage(value,proto.proto.Broker.deserializeBinaryFromReader);
      msg.addBrokers(value);
      break;
    case 2:
      var value = new proto.proto.StreamMetadata;
      reader.readMessage(value,proto.proto.StreamMetadata.deserializeBinaryFromReader);
      msg.addMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FetchMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FetchMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FetchMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrokersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Broker.serializeBinaryToWriter
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.StreamMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Broker brokers = 1;
 * @return {!Array<!proto.proto.Broker>}
 */
proto.proto.FetchMetadataResponse.prototype.getBrokersList = function() {
  return /** @type{!Array<!proto.proto.Broker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Broker, 1));
};


/** @param {!Array<!proto.proto.Broker>} value */
proto.proto.FetchMetadataResponse.prototype.setBrokersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Broker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Broker}
 */
proto.proto.FetchMetadataResponse.prototype.addBrokers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Broker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.FetchMetadataResponse.prototype.clearBrokersList = function() {
  this.setBrokersList([]);
};


/**
 * repeated StreamMetadata metadata = 2;
 * @return {!Array<!proto.proto.StreamMetadata>}
 */
proto.proto.FetchMetadataResponse.prototype.getMetadataList = function() {
  return /** @type{!Array<!proto.proto.StreamMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.StreamMetadata, 2));
};


/** @param {!Array<!proto.proto.StreamMetadata>} value */
proto.proto.FetchMetadataResponse.prototype.setMetadataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.StreamMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.StreamMetadata}
 */
proto.proto.FetchMetadataResponse.prototype.addMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.StreamMetadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.FetchMetadataResponse.prototype.clearMetadataList = function() {
  this.setMetadataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FetchPartitionMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FetchPartitionMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FetchPartitionMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchPartitionMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partition: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FetchPartitionMetadataRequest}
 */
proto.proto.FetchPartitionMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FetchPartitionMetadataRequest;
  return proto.proto.FetchPartitionMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FetchPartitionMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FetchPartitionMetadataRequest}
 */
proto.proto.FetchPartitionMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FetchPartitionMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FetchPartitionMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FetchPartitionMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchPartitionMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.FetchPartitionMetadataRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.FetchPartitionMetadataRequest.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partition = 2;
 * @return {number}
 */
proto.proto.FetchPartitionMetadataRequest.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.FetchPartitionMetadataRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FetchPartitionMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FetchPartitionMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FetchPartitionMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchPartitionMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.proto.PartitionMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FetchPartitionMetadataResponse}
 */
proto.proto.FetchPartitionMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FetchPartitionMetadataResponse;
  return proto.proto.FetchPartitionMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FetchPartitionMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FetchPartitionMetadataResponse}
 */
proto.proto.FetchPartitionMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.PartitionMetadata;
      reader.readMessage(value,proto.proto.PartitionMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FetchPartitionMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FetchPartitionMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FetchPartitionMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchPartitionMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.PartitionMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional PartitionMetadata metadata = 1;
 * @return {?proto.proto.PartitionMetadata}
 */
proto.proto.FetchPartitionMetadataResponse.prototype.getMetadata = function() {
  return /** @type{?proto.proto.PartitionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.PartitionMetadata, 1));
};


/** @param {?proto.proto.PartitionMetadata|undefined} value */
proto.proto.FetchPartitionMetadataResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.FetchPartitionMetadataResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FetchPartitionMetadataResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PublishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PublishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PublishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64(),
    stream: jspb.Message.getFieldWithDefault(msg, 3, ""),
    partition: jspb.Message.getFieldWithDefault(msg, 4, 0),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    ackinbox: jspb.Message.getFieldWithDefault(msg, 6, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ackpolicy: jspb.Message.getFieldWithDefault(msg, 8, 0),
    expectedoffset: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PublishRequest}
 */
proto.proto.PublishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PublishRequest;
  return proto.proto.PublishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PublishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PublishRequest}
 */
proto.proto.PublishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    case 5:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckinbox(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 8:
      var value = /** @type {!proto.proto.AckPolicy} */ (reader.readEnum());
      msg.setAckpolicy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpectedoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PublishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PublishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PublishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getAckinbox();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAckpolicy();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getExpectedoffset();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.PublishRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.proto.PublishRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.proto.PublishRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.PublishRequest.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.PublishRequest.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.proto.PublishRequest.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.proto.PublishRequest.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.PublishRequest.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string stream = 3;
 * @return {string}
 */
proto.proto.PublishRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.PublishRequest.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 partition = 4;
 * @return {number}
 */
proto.proto.PublishRequest.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.PublishRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * map<string, bytes> headers = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.proto.PublishRequest.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.proto.PublishRequest.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
};


/**
 * optional string ackInbox = 6;
 * @return {string}
 */
proto.proto.PublishRequest.prototype.getAckinbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.PublishRequest.prototype.setAckinbox = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string correlationId = 7;
 * @return {string}
 */
proto.proto.PublishRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.PublishRequest.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional AckPolicy ackPolicy = 8;
 * @return {!proto.proto.AckPolicy}
 */
proto.proto.PublishRequest.prototype.getAckpolicy = function() {
  return /** @type {!proto.proto.AckPolicy} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.proto.AckPolicy} value */
proto.proto.PublishRequest.prototype.setAckpolicy = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int64 expectedOffset = 9;
 * @return {number}
 */
proto.proto.PublishRequest.prototype.getExpectedoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.PublishRequest.prototype.setExpectedoffset = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PublishAsyncError.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PublishAsyncError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PublishAsyncError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishAsyncError.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PublishAsyncError}
 */
proto.proto.PublishAsyncError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PublishAsyncError;
  return proto.proto.PublishAsyncError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PublishAsyncError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PublishAsyncError}
 */
proto.proto.PublishAsyncError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.PublishAsyncError.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PublishAsyncError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PublishAsyncError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PublishAsyncError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishAsyncError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.PublishAsyncError.Code = {
  UNKNOWN: 0,
  BAD_REQUEST: 1,
  NOT_FOUND: 2,
  INTERNAL: 3,
  READONLY: 4,
  INCORRECT_OFFSET: 5,
  ENCRYPTION_FAILED: 6
};

/**
 * optional Code code = 1;
 * @return {!proto.proto.PublishAsyncError.Code}
 */
proto.proto.PublishAsyncError.prototype.getCode = function() {
  return /** @type {!proto.proto.PublishAsyncError.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.PublishAsyncError.Code} value */
proto.proto.PublishAsyncError.prototype.setCode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.proto.PublishAsyncError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.PublishAsyncError.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PublishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PublishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PublishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && proto.proto.Ack.toObject(includeInstance, f),
    asyncerror: (f = msg.getAsyncerror()) && proto.proto.PublishAsyncError.toObject(includeInstance, f),
    correlationid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PublishResponse}
 */
proto.proto.PublishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PublishResponse;
  return proto.proto.PublishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PublishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PublishResponse}
 */
proto.proto.PublishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Ack;
      reader.readMessage(value,proto.proto.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.proto.PublishAsyncError;
      reader.readMessage(value,proto.proto.PublishAsyncError.deserializeBinaryFromReader);
      msg.setAsyncerror(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PublishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PublishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PublishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Ack.serializeBinaryToWriter
    );
  }
  f = message.getAsyncerror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.PublishAsyncError.serializeBinaryToWriter
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Ack ack = 1;
 * @return {?proto.proto.Ack}
 */
proto.proto.PublishResponse.prototype.getAck = function() {
  return /** @type{?proto.proto.Ack} */ (
    jspb.Message.getWrapperField(this, proto.proto.Ack, 1));
};


/** @param {?proto.proto.Ack|undefined} value */
proto.proto.PublishResponse.prototype.setAck = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.PublishResponse.prototype.clearAck = function() {
  this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PublishResponse.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublishAsyncError asyncError = 2;
 * @return {?proto.proto.PublishAsyncError}
 */
proto.proto.PublishResponse.prototype.getAsyncerror = function() {
  return /** @type{?proto.proto.PublishAsyncError} */ (
    jspb.Message.getWrapperField(this, proto.proto.PublishAsyncError, 2));
};


/** @param {?proto.proto.PublishAsyncError|undefined} value */
proto.proto.PublishResponse.prototype.setAsyncerror = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.PublishResponse.prototype.clearAsyncerror = function() {
  this.setAsyncerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PublishResponse.prototype.hasAsyncerror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string correlationId = 3;
 * @return {string}
 */
proto.proto.PublishResponse.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.PublishResponse.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PublishToSubjectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PublishToSubjectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PublishToSubjectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishToSubjectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64(),
    subject: jspb.Message.getFieldWithDefault(msg, 3, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    ackinbox: jspb.Message.getFieldWithDefault(msg, 5, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ackpolicy: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PublishToSubjectRequest}
 */
proto.proto.PublishToSubjectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PublishToSubjectRequest;
  return proto.proto.PublishToSubjectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PublishToSubjectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PublishToSubjectRequest}
 */
proto.proto.PublishToSubjectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 4:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckinbox(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 7:
      var value = /** @type {!proto.proto.AckPolicy} */ (reader.readEnum());
      msg.setAckpolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PublishToSubjectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PublishToSubjectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PublishToSubjectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishToSubjectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getAckinbox();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAckpolicy();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.PublishToSubjectRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.proto.PublishToSubjectRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.proto.PublishToSubjectRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.PublishToSubjectRequest.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.PublishToSubjectRequest.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.proto.PublishToSubjectRequest.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.proto.PublishToSubjectRequest.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.PublishToSubjectRequest.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string subject = 3;
 * @return {string}
 */
proto.proto.PublishToSubjectRequest.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.PublishToSubjectRequest.prototype.setSubject = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, bytes> headers = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.proto.PublishToSubjectRequest.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.proto.PublishToSubjectRequest.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
};


/**
 * optional string ackInbox = 5;
 * @return {string}
 */
proto.proto.PublishToSubjectRequest.prototype.getAckinbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.PublishToSubjectRequest.prototype.setAckinbox = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string correlationId = 6;
 * @return {string}
 */
proto.proto.PublishToSubjectRequest.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.PublishToSubjectRequest.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional AckPolicy ackPolicy = 7;
 * @return {!proto.proto.AckPolicy}
 */
proto.proto.PublishToSubjectRequest.prototype.getAckpolicy = function() {
  return /** @type {!proto.proto.AckPolicy} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.proto.AckPolicy} value */
proto.proto.PublishToSubjectRequest.prototype.setAckpolicy = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PublishToSubjectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PublishToSubjectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PublishToSubjectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishToSubjectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && proto.proto.Ack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PublishToSubjectResponse}
 */
proto.proto.PublishToSubjectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PublishToSubjectResponse;
  return proto.proto.PublishToSubjectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PublishToSubjectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PublishToSubjectResponse}
 */
proto.proto.PublishToSubjectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Ack;
      reader.readMessage(value,proto.proto.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PublishToSubjectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PublishToSubjectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PublishToSubjectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PublishToSubjectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Ack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ack ack = 1;
 * @return {?proto.proto.Ack}
 */
proto.proto.PublishToSubjectResponse.prototype.getAck = function() {
  return /** @type{?proto.proto.Ack} */ (
    jspb.Message.getWrapperField(this, proto.proto.Ack, 1));
};


/** @param {?proto.proto.Ack|undefined} value */
proto.proto.PublishToSubjectResponse.prototype.setAck = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.PublishToSubjectResponse.prototype.clearAck = function() {
  this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PublishToSubjectResponse.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetCursorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetCursorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetCursorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetCursorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cursorid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetCursorRequest}
 */
proto.proto.SetCursorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetCursorRequest;
  return proto.proto.SetCursorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetCursorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetCursorRequest}
 */
proto.proto.SetCursorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursorid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetCursorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetCursorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetCursorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetCursorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCursorid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.SetCursorRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.SetCursorRequest.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partition = 2;
 * @return {number}
 */
proto.proto.SetCursorRequest.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.SetCursorRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string cursorId = 3;
 * @return {string}
 */
proto.proto.SetCursorRequest.prototype.getCursorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.SetCursorRequest.prototype.setCursorid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 offset = 4;
 * @return {number}
 */
proto.proto.SetCursorRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.SetCursorRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetCursorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetCursorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetCursorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetCursorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetCursorResponse}
 */
proto.proto.SetCursorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetCursorResponse;
  return proto.proto.SetCursorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetCursorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetCursorResponse}
 */
proto.proto.SetCursorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetCursorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetCursorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetCursorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetCursorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FetchCursorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FetchCursorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FetchCursorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchCursorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cursorid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FetchCursorRequest}
 */
proto.proto.FetchCursorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FetchCursorRequest;
  return proto.proto.FetchCursorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FetchCursorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FetchCursorRequest}
 */
proto.proto.FetchCursorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FetchCursorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FetchCursorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FetchCursorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchCursorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCursorid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.FetchCursorRequest.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.FetchCursorRequest.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partition = 2;
 * @return {number}
 */
proto.proto.FetchCursorRequest.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.FetchCursorRequest.prototype.setPartition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string cursorId = 3;
 * @return {string}
 */
proto.proto.FetchCursorRequest.prototype.getCursorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.FetchCursorRequest.prototype.setCursorid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FetchCursorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FetchCursorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FetchCursorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchCursorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FetchCursorResponse}
 */
proto.proto.FetchCursorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FetchCursorResponse;
  return proto.proto.FetchCursorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FetchCursorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FetchCursorResponse}
 */
proto.proto.FetchCursorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FetchCursorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FetchCursorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FetchCursorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FetchCursorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 offset = 1;
 * @return {number}
 */
proto.proto.FetchCursorResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.FetchCursorResponse.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Broker.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Broker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Broker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Broker.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Broker}
 */
proto.proto.Broker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Broker;
  return proto.proto.Broker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Broker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Broker}
 */
proto.proto.Broker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Broker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Broker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Broker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Broker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.Broker.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.Broker.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.proto.Broker.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.Broker.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.proto.Broker.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.Broker.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StreamMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StreamMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StreamMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subject: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, 0),
    partitionsMap: (f = msg.getPartitionsMap()) ? f.toObject(includeInstance, proto.proto.PartitionMetadata.toObject) : [],
    creationtimestamp: jspb.Message.getFieldWithDefault(msg, 5, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StreamMetadata}
 */
proto.proto.StreamMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StreamMetadata;
  return proto.proto.StreamMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StreamMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StreamMetadata}
 */
proto.proto.StreamMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.StreamMetadata.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 4:
      var value = msg.getPartitionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.proto.PartitionMetadata.deserializeBinaryFromReader, 0);
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCreationtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StreamMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StreamMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StreamMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StreamMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPartitionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.proto.PartitionMetadata.serializeBinaryToWriter);
  }
  f = message.getCreationtimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.StreamMetadata.Error = {
  OK: 0,
  UNKNOWN_STREAM: 1
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.StreamMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.StreamMetadata.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subject = 2;
 * @return {string}
 */
proto.proto.StreamMetadata.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.StreamMetadata.prototype.setSubject = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Error error = 3;
 * @return {!proto.proto.StreamMetadata.Error}
 */
proto.proto.StreamMetadata.prototype.getError = function() {
  return /** @type {!proto.proto.StreamMetadata.Error} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.proto.StreamMetadata.Error} value */
proto.proto.StreamMetadata.prototype.setError = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * map<int32, PartitionMetadata> partitions = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.proto.PartitionMetadata>}
 */
proto.proto.StreamMetadata.prototype.getPartitionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.proto.PartitionMetadata>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.proto.PartitionMetadata));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.proto.StreamMetadata.prototype.clearPartitionsMap = function() {
  this.getPartitionsMap().clear();
};


/**
 * optional int64 creationTimestamp = 5;
 * @return {string}
 */
proto.proto.StreamMetadata.prototype.getCreationtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.proto.StreamMetadata.prototype.setCreationtimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PartitionEventTimestamps.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PartitionEventTimestamps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PartitionEventTimestamps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PartitionEventTimestamps.toObject = function(includeInstance, msg) {
  var f, obj = {
    firsttimestamp: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    latesttimestamp: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PartitionEventTimestamps}
 */
proto.proto.PartitionEventTimestamps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PartitionEventTimestamps;
  return proto.proto.PartitionEventTimestamps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PartitionEventTimestamps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PartitionEventTimestamps}
 */
proto.proto.PartitionEventTimestamps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFirsttimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLatesttimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PartitionEventTimestamps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PartitionEventTimestamps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PartitionEventTimestamps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PartitionEventTimestamps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirsttimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getLatesttimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional int64 firstTimestamp = 1;
 * @return {string}
 */
proto.proto.PartitionEventTimestamps.prototype.getFirsttimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.proto.PartitionEventTimestamps.prototype.setFirsttimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 latestTimestamp = 2;
 * @return {string}
 */
proto.proto.PartitionEventTimestamps.prototype.getLatesttimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.proto.PartitionEventTimestamps.prototype.setLatesttimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PartitionMetadata.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PartitionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PartitionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PartitionMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PartitionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    leader: jspb.Message.getFieldWithDefault(msg, 2, ""),
    replicasList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    isrList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    highwatermark: jspb.Message.getFieldWithDefault(msg, 5, 0),
    newestoffset: jspb.Message.getFieldWithDefault(msg, 6, 0),
    paused: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    readonly: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    messagesreceivedtimestamps: (f = msg.getMessagesreceivedtimestamps()) && proto.proto.PartitionEventTimestamps.toObject(includeInstance, f),
    pausetimestamps: (f = msg.getPausetimestamps()) && proto.proto.PartitionEventTimestamps.toObject(includeInstance, f),
    readonlytimestamps: (f = msg.getReadonlytimestamps()) && proto.proto.PartitionEventTimestamps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PartitionMetadata}
 */
proto.proto.PartitionMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PartitionMetadata;
  return proto.proto.PartitionMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PartitionMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PartitionMetadata}
 */
proto.proto.PartitionMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLeader(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addReplicas(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addIsr(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHighwatermark(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNewestoffset(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaused(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    case 9:
      var value = new proto.proto.PartitionEventTimestamps;
      reader.readMessage(value,proto.proto.PartitionEventTimestamps.deserializeBinaryFromReader);
      msg.setMessagesreceivedtimestamps(value);
      break;
    case 10:
      var value = new proto.proto.PartitionEventTimestamps;
      reader.readMessage(value,proto.proto.PartitionEventTimestamps.deserializeBinaryFromReader);
      msg.setPausetimestamps(value);
      break;
    case 11:
      var value = new proto.proto.PartitionEventTimestamps;
      reader.readMessage(value,proto.proto.PartitionEventTimestamps.deserializeBinaryFromReader);
      msg.setReadonlytimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PartitionMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PartitionMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PartitionMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PartitionMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLeader();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReplicasList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getIsrList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getHighwatermark();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNewestoffset();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPaused();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getReadonly();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getMessagesreceivedtimestamps();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.PartitionEventTimestamps.serializeBinaryToWriter
    );
  }
  f = message.getPausetimestamps();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.PartitionEventTimestamps.serializeBinaryToWriter
    );
  }
  f = message.getReadonlytimestamps();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.PartitionEventTimestamps.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.proto.PartitionMetadata.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.PartitionMetadata.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string leader = 2;
 * @return {string}
 */
proto.proto.PartitionMetadata.prototype.getLeader = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.PartitionMetadata.prototype.setLeader = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string replicas = 3;
 * @return {!Array<string>}
 */
proto.proto.PartitionMetadata.prototype.getReplicasList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.proto.PartitionMetadata.prototype.setReplicasList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.proto.PartitionMetadata.prototype.addReplicas = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.PartitionMetadata.prototype.clearReplicasList = function() {
  this.setReplicasList([]);
};


/**
 * repeated string isr = 4;
 * @return {!Array<string>}
 */
proto.proto.PartitionMetadata.prototype.getIsrList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.proto.PartitionMetadata.prototype.setIsrList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.proto.PartitionMetadata.prototype.addIsr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.PartitionMetadata.prototype.clearIsrList = function() {
  this.setIsrList([]);
};


/**
 * optional int64 highWatermark = 5;
 * @return {number}
 */
proto.proto.PartitionMetadata.prototype.getHighwatermark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.PartitionMetadata.prototype.setHighwatermark = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 newestOffset = 6;
 * @return {number}
 */
proto.proto.PartitionMetadata.prototype.getNewestoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.PartitionMetadata.prototype.setNewestoffset = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool paused = 7;
 * @return {boolean}
 */
proto.proto.PartitionMetadata.prototype.getPaused = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.proto.PartitionMetadata.prototype.setPaused = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool readonly = 8;
 * @return {boolean}
 */
proto.proto.PartitionMetadata.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.proto.PartitionMetadata.prototype.setReadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional PartitionEventTimestamps messagesReceivedTimestamps = 9;
 * @return {?proto.proto.PartitionEventTimestamps}
 */
proto.proto.PartitionMetadata.prototype.getMessagesreceivedtimestamps = function() {
  return /** @type{?proto.proto.PartitionEventTimestamps} */ (
    jspb.Message.getWrapperField(this, proto.proto.PartitionEventTimestamps, 9));
};


/** @param {?proto.proto.PartitionEventTimestamps|undefined} value */
proto.proto.PartitionMetadata.prototype.setMessagesreceivedtimestamps = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.PartitionMetadata.prototype.clearMessagesreceivedtimestamps = function() {
  this.setMessagesreceivedtimestamps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PartitionMetadata.prototype.hasMessagesreceivedtimestamps = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PartitionEventTimestamps pauseTimestamps = 10;
 * @return {?proto.proto.PartitionEventTimestamps}
 */
proto.proto.PartitionMetadata.prototype.getPausetimestamps = function() {
  return /** @type{?proto.proto.PartitionEventTimestamps} */ (
    jspb.Message.getWrapperField(this, proto.proto.PartitionEventTimestamps, 10));
};


/** @param {?proto.proto.PartitionEventTimestamps|undefined} value */
proto.proto.PartitionMetadata.prototype.setPausetimestamps = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.PartitionMetadata.prototype.clearPausetimestamps = function() {
  this.setPausetimestamps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PartitionMetadata.prototype.hasPausetimestamps = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PartitionEventTimestamps readonlyTimestamps = 11;
 * @return {?proto.proto.PartitionEventTimestamps}
 */
proto.proto.PartitionMetadata.prototype.getReadonlytimestamps = function() {
  return /** @type{?proto.proto.PartitionEventTimestamps} */ (
    jspb.Message.getWrapperField(this, proto.proto.PartitionEventTimestamps, 11));
};


/** @param {?proto.proto.PartitionEventTimestamps|undefined} value */
proto.proto.PartitionMetadata.prototype.setReadonlytimestamps = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.PartitionMetadata.prototype.clearReadonlytimestamps = function() {
  this.setReadonlytimestamps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PartitionMetadata.prototype.hasReadonlytimestamps = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    stream: jspb.Message.getFieldWithDefault(msg, 5, ""),
    partition: jspb.Message.getFieldWithDefault(msg, 6, 0),
    subject: jspb.Message.getFieldWithDefault(msg, 7, ""),
    replysubject: jspb.Message.getFieldWithDefault(msg, 8, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    ackinbox: jspb.Message.getFieldWithDefault(msg, 10, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    ackpolicy: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Message}
 */
proto.proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Message;
  return proto.proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Message}
 */
proto.proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplysubject(value);
      break;
    case 9:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckinbox(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 12:
      var value = /** @type {!proto.proto.AckPolicy} */ (reader.readEnum());
      msg.setAckpolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReplysubject();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getAckinbox();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAckpolicy();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional int64 offset = 1;
 * @return {string}
 */
proto.proto.Message.prototype.getOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.proto.Message.prototype.setOffset = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Message.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.proto.Message.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.proto.Message.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Message.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Message.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.proto.Message.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.proto.Message.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.proto.Message.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {string}
 */
proto.proto.Message.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.proto.Message.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional string stream = 5;
 * @return {string}
 */
proto.proto.Message.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.Message.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 partition = 6;
 * @return {number}
 */
proto.proto.Message.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.Message.prototype.setPartition = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string subject = 7;
 * @return {string}
 */
proto.proto.Message.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.Message.prototype.setSubject = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string replySubject = 8;
 * @return {string}
 */
proto.proto.Message.prototype.getReplysubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.proto.Message.prototype.setReplysubject = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * map<string, bytes> headers = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.proto.Message.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.proto.Message.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
};


/**
 * optional string ackInbox = 10;
 * @return {string}
 */
proto.proto.Message.prototype.getAckinbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.proto.Message.prototype.setAckinbox = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string correlationId = 11;
 * @return {string}
 */
proto.proto.Message.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.proto.Message.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional AckPolicy ackPolicy = 12;
 * @return {!proto.proto.AckPolicy}
 */
proto.proto.Message.prototype.getAckpolicy = function() {
  return /** @type {!proto.proto.AckPolicy} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.proto.AckPolicy} value */
proto.proto.Message.prototype.setAckpolicy = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partitionsubject: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msgsubject: jspb.Message.getFieldWithDefault(msg, 3, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    ackinbox: jspb.Message.getFieldWithDefault(msg, 5, ""),
    correlationid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ackpolicy: jspb.Message.getFieldWithDefault(msg, 7, 0),
    receptiontimestamp: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    committimestamp: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    ackerror: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Ack}
 */
proto.proto.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Ack;
  return proto.proto.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Ack}
 */
proto.proto.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartitionsubject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgsubject(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckinbox(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 7:
      var value = /** @type {!proto.proto.AckPolicy} */ (reader.readEnum());
      msg.setAckpolicy(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setReceptiontimestamp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCommittimestamp(value);
      break;
    case 10:
      var value = /** @type {!proto.proto.Ack.Error} */ (reader.readEnum());
      msg.setAckerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartitionsubject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsgsubject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOffset();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getAckinbox();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAckpolicy();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getReceptiontimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      8,
      f
    );
  }
  f = message.getCommittimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      9,
      f
    );
  }
  f = message.getAckerror();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.Ack.Error = {
  OK: 0,
  UNKNOWN: 1,
  INCORRECT_OFFSET: 2,
  TOO_LARGE: 3,
  ENCRYPTION: 4
};

/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.Ack.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.Ack.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string partitionSubject = 2;
 * @return {string}
 */
proto.proto.Ack.prototype.getPartitionsubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.Ack.prototype.setPartitionsubject = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string msgSubject = 3;
 * @return {string}
 */
proto.proto.Ack.prototype.getMsgsubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.Ack.prototype.setMsgsubject = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 offset = 4;
 * @return {string}
 */
proto.proto.Ack.prototype.getOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.proto.Ack.prototype.setOffset = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional string ackInbox = 5;
 * @return {string}
 */
proto.proto.Ack.prototype.getAckinbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.Ack.prototype.setAckinbox = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string correlationId = 6;
 * @return {string}
 */
proto.proto.Ack.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.Ack.prototype.setCorrelationid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional AckPolicy ackPolicy = 7;
 * @return {!proto.proto.AckPolicy}
 */
proto.proto.Ack.prototype.getAckpolicy = function() {
  return /** @type {!proto.proto.AckPolicy} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.proto.AckPolicy} value */
proto.proto.Ack.prototype.setAckpolicy = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional int64 receptionTimestamp = 8;
 * @return {string}
 */
proto.proto.Ack.prototype.getReceptiontimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/** @param {string} value */
proto.proto.Ack.prototype.setReceptiontimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional int64 commitTimestamp = 9;
 * @return {string}
 */
proto.proto.Ack.prototype.getCommittimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/** @param {string} value */
proto.proto.Ack.prototype.setCommittimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 9, value);
};


/**
 * optional Error ackError = 10;
 * @return {!proto.proto.Ack.Error}
 */
proto.proto.Ack.prototype.getAckerror = function() {
  return /** @type {!proto.proto.Ack.Error} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.proto.Ack.Error} value */
proto.proto.Ack.prototype.setAckerror = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.CreateStreamOp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CreateStreamOp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CreateStreamOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CreateStreamOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateStreamOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partitionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CreateStreamOp}
 */
proto.proto.CreateStreamOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CreateStreamOp;
  return proto.proto.CreateStreamOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CreateStreamOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CreateStreamOp}
 */
proto.proto.CreateStreamOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPartitionsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CreateStreamOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CreateStreamOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CreateStreamOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CreateStreamOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartitionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.CreateStreamOp.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.CreateStreamOp.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 partitions = 2;
 * @return {!Array<number>}
 */
proto.proto.CreateStreamOp.prototype.getPartitionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.proto.CreateStreamOp.prototype.setPartitionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.proto.CreateStreamOp.prototype.addPartitions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.CreateStreamOp.prototype.clearPartitionsList = function() {
  this.setPartitionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DeleteStreamOp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DeleteStreamOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DeleteStreamOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DeleteStreamOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DeleteStreamOp}
 */
proto.proto.DeleteStreamOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DeleteStreamOp;
  return proto.proto.DeleteStreamOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DeleteStreamOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DeleteStreamOp}
 */
proto.proto.DeleteStreamOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DeleteStreamOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DeleteStreamOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DeleteStreamOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DeleteStreamOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.DeleteStreamOp.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.DeleteStreamOp.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PauseStreamOp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PauseStreamOp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PauseStreamOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PauseStreamOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PauseStreamOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partitionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    resumeall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PauseStreamOp}
 */
proto.proto.PauseStreamOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PauseStreamOp;
  return proto.proto.PauseStreamOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PauseStreamOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PauseStreamOp}
 */
proto.proto.PauseStreamOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPartitionsList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResumeall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PauseStreamOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PauseStreamOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PauseStreamOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PauseStreamOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartitionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getResumeall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.PauseStreamOp.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.PauseStreamOp.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 partitions = 2;
 * @return {!Array<number>}
 */
proto.proto.PauseStreamOp.prototype.getPartitionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.proto.PauseStreamOp.prototype.setPartitionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.proto.PauseStreamOp.prototype.addPartitions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.PauseStreamOp.prototype.clearPartitionsList = function() {
  this.setPartitionsList([]);
};


/**
 * optional bool resumeAll = 3;
 * @return {boolean}
 */
proto.proto.PauseStreamOp.prototype.getResumeall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.PauseStreamOp.prototype.setResumeall = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ResumeStreamOp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ResumeStreamOp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ResumeStreamOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ResumeStreamOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ResumeStreamOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partitionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ResumeStreamOp}
 */
proto.proto.ResumeStreamOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ResumeStreamOp;
  return proto.proto.ResumeStreamOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ResumeStreamOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ResumeStreamOp}
 */
proto.proto.ResumeStreamOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPartitionsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ResumeStreamOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ResumeStreamOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ResumeStreamOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ResumeStreamOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartitionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.ResumeStreamOp.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.ResumeStreamOp.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 partitions = 2;
 * @return {!Array<number>}
 */
proto.proto.ResumeStreamOp.prototype.getPartitionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.proto.ResumeStreamOp.prototype.setPartitionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.proto.ResumeStreamOp.prototype.addPartitions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.ResumeStreamOp.prototype.clearPartitionsList = function() {
  this.setPartitionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SetStreamReadonlyOp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetStreamReadonlyOp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetStreamReadonlyOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetStreamReadonlyOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetStreamReadonlyOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: jspb.Message.getFieldWithDefault(msg, 1, ""),
    partitionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    readonly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetStreamReadonlyOp}
 */
proto.proto.SetStreamReadonlyOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetStreamReadonlyOp;
  return proto.proto.SetStreamReadonlyOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetStreamReadonlyOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetStreamReadonlyOp}
 */
proto.proto.SetStreamReadonlyOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPartitionsList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetStreamReadonlyOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetStreamReadonlyOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetStreamReadonlyOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetStreamReadonlyOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartitionsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getReadonly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string stream = 1;
 * @return {string}
 */
proto.proto.SetStreamReadonlyOp.prototype.getStream = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.SetStreamReadonlyOp.prototype.setStream = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 partitions = 2;
 * @return {!Array<number>}
 */
proto.proto.SetStreamReadonlyOp.prototype.getPartitionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.proto.SetStreamReadonlyOp.prototype.setPartitionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.proto.SetStreamReadonlyOp.prototype.addPartitions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.proto.SetStreamReadonlyOp.prototype.clearPartitionsList = function() {
  this.setPartitionsList([]);
};


/**
 * optional bool readonly = 3;
 * @return {boolean}
 */
proto.proto.SetStreamReadonlyOp.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.proto.SetStreamReadonlyOp.prototype.setReadonly = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ActivityStreamEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ActivityStreamEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ActivityStreamEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ActivityStreamEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    op: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createstreamop: (f = msg.getCreatestreamop()) && proto.proto.CreateStreamOp.toObject(includeInstance, f),
    deletestreamop: (f = msg.getDeletestreamop()) && proto.proto.DeleteStreamOp.toObject(includeInstance, f),
    pausestreamop: (f = msg.getPausestreamop()) && proto.proto.PauseStreamOp.toObject(includeInstance, f),
    resumestreamop: (f = msg.getResumestreamop()) && proto.proto.ResumeStreamOp.toObject(includeInstance, f),
    setstreamreadonlyop: (f = msg.getSetstreamreadonlyop()) && proto.proto.SetStreamReadonlyOp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ActivityStreamEvent}
 */
proto.proto.ActivityStreamEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ActivityStreamEvent;
  return proto.proto.ActivityStreamEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ActivityStreamEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ActivityStreamEvent}
 */
proto.proto.ActivityStreamEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.ActivityStreamOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 3:
      var value = new proto.proto.CreateStreamOp;
      reader.readMessage(value,proto.proto.CreateStreamOp.deserializeBinaryFromReader);
      msg.setCreatestreamop(value);
      break;
    case 4:
      var value = new proto.proto.DeleteStreamOp;
      reader.readMessage(value,proto.proto.DeleteStreamOp.deserializeBinaryFromReader);
      msg.setDeletestreamop(value);
      break;
    case 5:
      var value = new proto.proto.PauseStreamOp;
      reader.readMessage(value,proto.proto.PauseStreamOp.deserializeBinaryFromReader);
      msg.setPausestreamop(value);
      break;
    case 6:
      var value = new proto.proto.ResumeStreamOp;
      reader.readMessage(value,proto.proto.ResumeStreamOp.deserializeBinaryFromReader);
      msg.setResumestreamop(value);
      break;
    case 7:
      var value = new proto.proto.SetStreamReadonlyOp;
      reader.readMessage(value,proto.proto.SetStreamReadonlyOp.deserializeBinaryFromReader);
      msg.setSetstreamreadonlyop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ActivityStreamEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ActivityStreamEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ActivityStreamEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ActivityStreamEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCreatestreamop();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.CreateStreamOp.serializeBinaryToWriter
    );
  }
  f = message.getDeletestreamop();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.DeleteStreamOp.serializeBinaryToWriter
    );
  }
  f = message.getPausestreamop();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.PauseStreamOp.serializeBinaryToWriter
    );
  }
  f = message.getResumestreamop();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.ResumeStreamOp.serializeBinaryToWriter
    );
  }
  f = message.getSetstreamreadonlyop();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.SetStreamReadonlyOp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.ActivityStreamEvent.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.ActivityStreamEvent.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ActivityStreamOp op = 2;
 * @return {!proto.proto.ActivityStreamOp}
 */
proto.proto.ActivityStreamEvent.prototype.getOp = function() {
  return /** @type {!proto.proto.ActivityStreamOp} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.proto.ActivityStreamOp} value */
proto.proto.ActivityStreamEvent.prototype.setOp = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional CreateStreamOp createStreamOp = 3;
 * @return {?proto.proto.CreateStreamOp}
 */
proto.proto.ActivityStreamEvent.prototype.getCreatestreamop = function() {
  return /** @type{?proto.proto.CreateStreamOp} */ (
    jspb.Message.getWrapperField(this, proto.proto.CreateStreamOp, 3));
};


/** @param {?proto.proto.CreateStreamOp|undefined} value */
proto.proto.ActivityStreamEvent.prototype.setCreatestreamop = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.ActivityStreamEvent.prototype.clearCreatestreamop = function() {
  this.setCreatestreamop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ActivityStreamEvent.prototype.hasCreatestreamop = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeleteStreamOp deleteStreamOp = 4;
 * @return {?proto.proto.DeleteStreamOp}
 */
proto.proto.ActivityStreamEvent.prototype.getDeletestreamop = function() {
  return /** @type{?proto.proto.DeleteStreamOp} */ (
    jspb.Message.getWrapperField(this, proto.proto.DeleteStreamOp, 4));
};


/** @param {?proto.proto.DeleteStreamOp|undefined} value */
proto.proto.ActivityStreamEvent.prototype.setDeletestreamop = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.ActivityStreamEvent.prototype.clearDeletestreamop = function() {
  this.setDeletestreamop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ActivityStreamEvent.prototype.hasDeletestreamop = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PauseStreamOp pauseStreamOp = 5;
 * @return {?proto.proto.PauseStreamOp}
 */
proto.proto.ActivityStreamEvent.prototype.getPausestreamop = function() {
  return /** @type{?proto.proto.PauseStreamOp} */ (
    jspb.Message.getWrapperField(this, proto.proto.PauseStreamOp, 5));
};


/** @param {?proto.proto.PauseStreamOp|undefined} value */
proto.proto.ActivityStreamEvent.prototype.setPausestreamop = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.ActivityStreamEvent.prototype.clearPausestreamop = function() {
  this.setPausestreamop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ActivityStreamEvent.prototype.hasPausestreamop = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResumeStreamOp resumeStreamOp = 6;
 * @return {?proto.proto.ResumeStreamOp}
 */
proto.proto.ActivityStreamEvent.prototype.getResumestreamop = function() {
  return /** @type{?proto.proto.ResumeStreamOp} */ (
    jspb.Message.getWrapperField(this, proto.proto.ResumeStreamOp, 6));
};


/** @param {?proto.proto.ResumeStreamOp|undefined} value */
proto.proto.ActivityStreamEvent.prototype.setResumestreamop = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.ActivityStreamEvent.prototype.clearResumestreamop = function() {
  this.setResumestreamop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ActivityStreamEvent.prototype.hasResumestreamop = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SetStreamReadonlyOp setStreamReadonlyOp = 7;
 * @return {?proto.proto.SetStreamReadonlyOp}
 */
proto.proto.ActivityStreamEvent.prototype.getSetstreamreadonlyop = function() {
  return /** @type{?proto.proto.SetStreamReadonlyOp} */ (
    jspb.Message.getWrapperField(this, proto.proto.SetStreamReadonlyOp, 7));
};


/** @param {?proto.proto.SetStreamReadonlyOp|undefined} value */
proto.proto.ActivityStreamEvent.prototype.setSetstreamreadonlyop = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.proto.ActivityStreamEvent.prototype.clearSetstreamreadonlyop = function() {
  this.setSetstreamreadonlyop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ActivityStreamEvent.prototype.hasSetstreamreadonlyop = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.proto.StartPosition = {
  NEW_ONLY: 0,
  OFFSET: 1,
  EARLIEST: 2,
  LATEST: 3,
  TIMESTAMP: 4
};

/**
 * @enum {number}
 */
proto.proto.StopPosition = {
  STOP_ON_CANCEL: 0,
  STOP_OFFSET: 1,
  STOP_LATEST: 2,
  STOP_TIMESTAMP: 3
};

/**
 * @enum {number}
 */
proto.proto.AckPolicy = {
  LEADER: 0,
  ALL: 1,
  NONE: 2
};

/**
 * @enum {number}
 */
proto.proto.ActivityStreamOp = {
  CREATE_STREAM: 0,
  DELETE_STREAM: 1,
  PAUSE_STREAM: 2,
  RESUME_STREAM: 3,
  SET_STREAM_READONLY: 4
};

goog.object.extend(exports, proto.proto);
